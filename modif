import re
import sqlite3
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# ---------------- –•—Ä–∞–Ω–∏–ª–∏—â–∞ ---------------- #
tournaments = {}  # {chat_id: {"matches": [], "scorers": {}, "playmakers": {}, "goals_today": {}, "assists_today": {}}}

# ---------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---------------- #
def get_chat_data(chat_id):
    if chat_id not in tournaments:
        tournaments[chat_id] = {
            "matches": [],
            "scorers": {},
            "playmakers": {},
            "goals_today": {},
            "assists_today": {},
        }
    return tournaments[chat_id]

def parse_players(scorer_str):
    players = []
    if scorer_str.strip():
        for entry in scorer_str.split(","):
            entry = entry.strip()
            if "+" in entry:
                scorer, assistant = map(str.strip, entry.split("+"))
                players.append((scorer, assistant))
            else:
                players.append((entry, None))
    return players

# ---------------- –ö–æ–º–∞–Ω–¥—ã ---------------- #
async def hello (update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öΩ –°–æ—Å—Ç–∞–≤—ã –≥–æ–≤–Ω–æ")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    tournaments[chat_id] = {
        "matches": [],
        "scorers": {},
        "playmakers": {},
        "goals_today": {},
        "assists_today": {}
    }
    await update.message.reply_text("üöÄ –ù–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä –Ω–∞—á–∞—Ç! –•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã!")

async def end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in tournaments or not tournaments[chat_id]["matches"]:
        await update.message.reply_text("‚ö†Ô∏è –¢—É—Ä–Ω–∏—Ä –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è –∏–ª–∏ –Ω–µ—Ç –º–∞—Ç—á–µ–π!")
        return

    data = tournaments[chat_id]

    # --- –¢–∞–±–ª–∏—Ü–∞ —Å –º–µ–¥–∞–ª—å–∫–∞–º–∏ ---
    teams = {}
    for t1, s1, t2, s2, _, _ in data["matches"]:
        for t in [t1, t2]:
            if t not in teams:
                teams[t] = {
                    "P": 0, "W": 0, "D": 0, "L": 0,
                    "GF": 0, "GA": 0, "GD": 0,
                    "Pts": 0, "form": []
                }

        teams[t1]["GF"] += s1
        teams[t1]["GA"] += s2
        teams[t2]["GF"] += s2
        teams[t2]["GA"] += s1
        teams[t1]["P"] += 1
        teams[t2]["P"] += 1

        if s1 > s2:
            teams[t1]["W"] += 1
            teams[t2]["L"] += 1
            teams[t1]["Pts"] += 3
        elif s1 < s2:
            teams[t2]["W"] += 1
            teams[t1]["L"] += 1
            teams[t2]["Pts"] += 3
        else:
            teams[t1]["D"] += 1
            teams[t2]["D"] += 1
            teams[t1]["Pts"] += 1
            teams[t2]["Pts"] += 1

    sorted_teams = sorted(
        teams.items(),
        key=lambda x: (-x[1]["Pts"], -(x[1]["GF"] - x[1]["GA"]), -x[1]["GF"])
    )

    medals = ["ü•á", "ü•à", "ü•â"]
    table_text = "üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–∏—Ç–æ–≥):\nüìä –ò | –í-–ù-–ü | –ó-–ü | –† | –û\n"
    for i, (t, stats) in enumerate(sorted_teams):
        gd = stats["GF"] - stats["GA"]
        medal = medals[i] if i < 3 else ""
        table_text += f"{medal} {t} | {stats['P']} | {stats['W']}-{stats['D']}-{stats['L']} | {stats['GF']}-{stats['GA']} | {gd} | {stats['Pts']}\n"

    await update.message.reply_text(table_text)

    # --- MVP ---
    mvp_scores = {player: data["scorers"].get(player, 0) + data["playmakers"].get(player, 0)
                  for player in set(list(data["scorers"].keys()) + list(data["playmakers"].keys()))}

    if mvp_scores:
        max_score = max(mvp_scores.values())
        mvps = [p for p, v in mvp_scores.items() if v == max_score]
        await update.message.reply_text(f"üî• MVP —Ç—É—Ä–Ω–∏—Ä–∞: {', '.join(mvps)} (Goals+Assists = {max_score})")

    # --- –ë–æ–º–±–∞—Ä–¥–∏—Ä—ã ---
    sorted_goals = sorted(data["goals_today"].items(), key=lambda x: -x[1])
    goal_values = []
    for _, g in sorted_goals:
        if g not in goal_values:
            goal_values.append(g)
        if len(goal_values) == 3:
            break

    goals_text = "‚öΩ –ê–≤—Ç–æ—Ä—ã –≥–æ–ª–æ–≤:\n"
    for player, goals in sorted_goals:
        if goals == goal_values[0]:
            medal = "ü•á"
        elif len(goal_values) > 1 and goals == goal_values[1]:
            medal = "ü•à"
        elif len(goal_values) > 2 and goals == goal_values[2]:
            medal = "ü•â"
        else:
            medal = ""
        goals_text += f"{medal} {player}: {goals}\n"

    await update.message.reply_text(goals_text)

    # --- –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã ---
    sorted_assists = sorted(data["assists_today"].items(), key=lambda x: -x[1])
    assist_values = []
    for _, a in sorted_assists:
        if a not in assist_values:
            assist_values.append(a)
        if len(assist_values) == 3:
            break

    assists_text = "üéØ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã —Ç—É—Ä–∏–Ω—Ä–∞:\n"
    for player, assists in sorted_assists:
        if assists == assist_values[0]:
            medal = "ü•á"
        elif len(assist_values) > 1 and assists == assist_values[1]:
            medal = "ü•à"
        elif len(assist_values) > 2 and assists == assist_values[2]:
            medal = "ü•â"
        else:
            medal

   

async def result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = get_chat_data(chat_id)

    text = " ".join(context.args)
    if not text:
        await update.message.reply_text(
            "‚ùå –§–æ—Ä–º–∞—Ç: /result –ö–æ–º–∞–Ω–¥–∞1 (–ò–≥—Ä–æ–∫1+–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç1, –ò–≥—Ä–æ–∫2) 2-1 –ö–æ–º–∞–Ω–¥–∞2 (–ò–≥—Ä–æ–∫3+–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç2)"
        )
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–∫—É –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞
    pattern = r"^(.+?)\s*(\((.*?)\))?\s*(\d+)\s*-\s*(\d+)\s*(.+?)\s*(\((.*?)\))?$"
    match = re.match(pattern, text)
    if not match:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä: /result –ë–∞—Ä—Å–∞ (–ú–µ—Å—Å–∏+–•–∞–≤–∏, –ù–µ–π–º–∞—Ä) 2-1 –†–µ–∞–ª (–†–æ–Ω–∞–ª–¥—É+–ë–µ–Ω–∑–µ–º–∞)"
        )
        return

    team1_name = match.group(1).strip()
    team1_players = match.group(3) or ""
    score1 = int(match.group(4))
    score2 = int(match.group(5))
    team2_name = match.group(6).strip()
    team2_players = match.group(8) or ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á –¥–ª—è undo
    data["matches"].append((team1_name, score1, team2_name, score2, team1_players, team2_players))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∞—Å—Å–∏—Å—Ç–æ–≤
    for scorer, assistant in parse_players(team1_players) + parse_players(team2_players):
        if scorer:
            data["scorers"][scorer] = data["scorers"].get(scorer, 0) + 1
            data["goals_today"][scorer] = data["goals_today"].get(scorer, 0) + 1
        if assistant:
            data["playmakers"][assistant] = data["playmakers"].get(assistant, 0) + 1
            data["assists_today"][assistant] = data["assists_today"].get(assistant, 0) + 1

    await update.message.reply_text("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")

async def undo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = get_chat_data(chat_id)
    if not data["matches"]:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    last_match = data["matches"].pop()
    team1, score1, team2, score2, rest1, rest2 = last_match

    # –£–±–∏—Ä–∞–µ–º –æ—á–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    def remove_players(players_str):
        for scorer, assistant in parse_players(players_str):
            if scorer and scorer in data["scorers"]:
                data["scorers"][scorer] -= 1
                data["goals_today"][scorer] -= 1
                if data["scorers"][scorer] <= 0:
                    del data["scorers"][scorer]
                if data["goals_today"][scorer] <= 0:
                    del data["goals_today"][scorer]
            if assistant and assistant in data["playmakers"]:
                data["playmakers"][assistant] -= 1
                data["assists_today"][assistant] -= 1
                if data["playmakers"][assistant] <= 0:
                    del data["playmakers"][assistant]
                if data["assists_today"][assistant] <= 0:
                    del data["assists_today"][assistant]

    remove_players(rest1)
    remove_players(rest2)
    await update.message.reply_text("‚Ü©Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á –æ—Ç–º–µ–Ω—ë–Ω!")

async def table(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = get_chat_data(chat_id)
    matches = data["matches"]

    teams = {}

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    for t1, s1, t2, s2, _, _ in matches:
        for t in [t1, t2]:
            if t not in teams:
                teams[t] = {
                    "P": 0, "W": 0, "D": 0, "L": 0,
                    "GF": 0, "GA": 0, "GD": 0,
                    "Pts": 0, "form": []
                }
             
        teams[t1]["GF"] += s1
        teams[t1]["GA"] += s2
        teams[t2]["GF"] += s2
        teams[t2]["GA"] += s1
        teams[t1]["P"] += 1
        teams[t2]["P"] += 1

        if s1 > s2:
            teams[t1]["W"] += 1
            teams[t2]["L"] += 1
            teams[t1]["Pts"] += 3
            teams[t1]["form"].append("W")
            teams[t2]["form"].append("L")
        elif s1 < s2:
            teams[t2]["W"] += 1
            teams[t1]["L"] += 1
            teams[t2]["Pts"] += 3
            teams[t2]["form"].append("W")
            teams[t1]["form"].append("L")
        else:
            teams[t1]["D"] += 1
            teams[t2]["D"] += 1
            teams[t1]["Pts"] += 1
            teams[t2]["Pts"] += 1
            teams[t1]["form"].append("D")
            teams[t2]["form"].append("D")

    text = "üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:\n"
    text += "üìä       –ò | –í-–ù-–ü | –ó-–ü | –† | –û | –§\n"

    for t, stats in sorted(teams.items(), key=lambda x: -x[1]["Pts"]):
        gd = stats["GF"] - stats["GA"]
        form_str = "".join(stats["form"][-3:])  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–∞—Ç—á–∞
        text += f"{t} | {stats['P']} | {stats['W']}-{stats['D']}-{stats['L']} | {stats['GF']}-{stats['GA']} | {gd} | {stats['Pts']} | {form_str}\n"

    await update.message.reply_text(text)

async def goals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = get_chat_data(chat_id)
    text = "‚öΩ –ì–æ–ª—ã:\n"
    for player, goals in sorted(data["goals_today"].items(), key=lambda x: -x[1]):
        text += f"{player}: {goals}\n"
    await update.message.reply_text(text)

async def assists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = get_chat_data(chat_id)
    text = "üéØ –ê—Å—Å–∏—Å—Ç—ã:\n"
    for player, assists in sorted(data["assists_today"].items(), key=lambda x: -x[1]):
        text += f"{player}: {assists}\n"
    await update.message.reply_text(text)

async def topscorers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = get_chat_data(chat_id)
    text = "üèÜ –õ—É—á—à–∏–µ –±–æ–º–±–∞—Ä–¥–∏—Ä—ã –∑–∞ –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã:\n"
    for player, goals in sorted(data["scorers"].items(), key=lambda x: -x[1]):
        text += f"{player}: {goals}\n"
    await update.message.reply_text(text)

async def playmakers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = get_chat_data(chat_id)
    text = "ü•á –õ—É—á—à–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –∑–∞ –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã:\n"
    for player, assists in sorted(data["playmakers"].items(), key=lambda x: -x[1]):
        text += f"{player}: {assists}\n"
    await update.message.reply_text(text)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    tournaments[chat_id] = {
        "matches": [],
        "scorers": {},
        "playmakers": {},
        "goals_today": {},
        "assists_today": {},
    }
    await update.message.reply_text("‚ôªÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

async def fullreset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if update.effective_user.id not in [924957374]:  # —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º!")
        return
    if chat_id in tournaments:
        del tournaments[chat_id]
    await update.message.reply_text("üóë –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö!")

# ---------------- –ó–∞–ø—É—Å–∫ ---------------- #
def main():
    app = ApplicationBuilder().token("8483314210:AAED1QC7gkebH4a6HyAsRP436OoZMN5PzIM").build()

    app.add_handler(CommandHandler("hello", hello))
    app.add_handler(CommandHandler("result", result))
    app.add_handler(CommandHandler("undo", undo))
    app.add_handler(CommandHandler("table", table))
    app.add_handler(CommandHandler("goals", goals))
    app.add_handler(CommandHandler("assists", assists))
    app.add_handler(CommandHandler("topscorers", topscorers))
    app.add_handler(CommandHandler("playmakers", playmakers))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("fullreset", fullreset))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("end", end))
    app.run_polling()

if __name__ == "__main__":
    main()

